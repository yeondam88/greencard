"use strict";
var common_1 = require('@angular/common');
var core_1 = require('@angular/core');
var testing_1 = require('@angular/common/testing');
var router_1 = require('@angular/router');
var mock_location_strategy_1 = require('./mock-location-strategy');
exports.provideFakeRouter = function (rootComponentType, config) {
    if (config === void 0) { config = []; }
    return [
        router_1.RouterOutletMap,
        { provide: router_1.UrlSerializer, useClass: router_1.DefaultUrlSerializer },
        { provide: common_1.Location, useClass: testing_1.SpyLocation },
        { provide: common_1.LocationStrategy, useClass: mock_location_strategy_1.MockLocationStrategy },
        {
            provide: router_1.Router,
            useFactory: function (resolver, urlSerializer, outletMap, location, injector) {
                return new router_1.Router(rootComponentType, resolver, urlSerializer, outletMap, location, injector, config);
            },
            deps: [core_1.ComponentResolver, router_1.UrlSerializer, router_1.RouterOutletMap, common_1.Location, core_1.Injector]
        },
        {
            provide: router_1.ActivatedRoute,
            useFactory: function (r) { return r.routerState.root; },
            deps: [router_1.Router]
        },
    ];
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rpbmcvcm91dGVyL3JvdXRlci10ZXN0aW5nLXByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0EsdUJBQTJDLGlCQUFpQixDQUFDLENBQUE7QUFDN0QscUJBQWtELGVBQWUsQ0FBQyxDQUFBO0FBQ2xFLHdCQUE0Qix5QkFBeUIsQ0FBQyxDQUFBO0FBQ3RELHVCQU9PLGlCQUFpQixDQUFDLENBQUE7QUFHekIsdUNBQXFDLDBCQUEwQixDQUFDLENBQUE7QUFFbkQseUJBQWlCLEdBQUcsVUFBQyxpQkFBc0IsRUFBRSxNQUF3QjtJQUF4QixzQkFBd0IsR0FBeEIsV0FBd0I7SUFDaEYsTUFBTSxDQUFDO1FBQ0wsd0JBQWU7UUFDZixFQUFFLE9BQU8sRUFBRSxzQkFBYSxFQUFFLFFBQVEsRUFBRSw2QkFBb0IsRUFBRTtRQUMxRCxFQUFFLE9BQU8sRUFBRSxpQkFBUSxFQUFFLFFBQVEsRUFBRSxxQkFBVyxFQUFFO1FBQzVDLEVBQUUsT0FBTyxFQUFFLHlCQUFnQixFQUFFLFFBQVEsRUFBRSw2Q0FBb0IsRUFBRTtRQUM3RDtZQUNFLE9BQU8sRUFBRSxlQUFNO1lBQ2YsVUFBVSxFQUFFLFVBQUMsUUFBMEIsRUFBRSxhQUEyQixFQUN2RCxTQUF5QixFQUFFLFFBQWlCLEVBQUUsUUFBaUI7Z0JBQzFFLE1BQU0sQ0FBQyxJQUFJLGVBQU0sQ0FDZixpQkFBaUIsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZGLENBQUM7WUFDRCxJQUFJLEVBQUUsQ0FBQyx3QkFBaUIsRUFBRSxzQkFBYSxFQUFFLHdCQUFlLEVBQUUsaUJBQVEsRUFBRSxlQUFRLENBQUM7U0FDOUU7UUFDRDtZQUNFLE9BQU8sRUFBRSx1QkFBYztZQUN2QixVQUFVLEVBQUUsVUFBQyxDQUFRLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksRUFBbEIsQ0FBa0I7WUFDNUMsSUFBSSxFQUFFLENBQUMsZUFBTSxDQUFDO1NBQ2Y7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3Rpbmcvcm91dGVyL3JvdXRlci10ZXN0aW5nLXByb3ZpZGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG50ZW1wb3JhcnkgbW9jayByb3V0ZXIgcHJvdmlkZXIgdW50aWwgQGFuZ3VsYXIgcHJvdmlkZXMgb25lIChjdXJyZW50bHkgbm90IGV4cG9ydGVkIC8gZXhwZXJpbWVudGFsKVxuY29waWVkIGZyb20gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NwcmluZ2Jvb3QtYW5ndWxhcjItdHV0b3JpYWwvYW5ndWxhcjItYXBwL21hc3Rlci9zcmMvc2hhcmVkL3JvdXRlcy9yb3V0ZXItdGVzdGluZy1wcm92aWRlcnMudHNcbiovXG5cbmltcG9ydCB7IExvY2F0aW9uLCBMb2NhdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudFJlc29sdmVyLCBJbmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3B5TG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24vdGVzdGluZyc7XG5pbXBvcnQge1xuICBBY3RpdmF0ZWRSb3V0ZSxcbiAgRGVmYXVsdFVybFNlcmlhbGl6ZXIsXG4gIFJvdXRlcixcbiAgUm91dGVyQ29uZmlnLFxuICBSb3V0ZXJPdXRsZXRNYXAsXG4gIFVybFNlcmlhbGl6ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuXG5pbXBvcnQgeyBNb2NrTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbW9jay1sb2NhdGlvbi1zdHJhdGVneSc7XG5cbmV4cG9ydCBjb25zdCBwcm92aWRlRmFrZVJvdXRlciA9IChyb290Q29tcG9uZW50VHlwZTpUeXBlLCBjb25maWc6Um91dGVyQ29uZmlnID0gW10pID0+IHtcbiAgcmV0dXJuIFtcbiAgICBSb3V0ZXJPdXRsZXRNYXAsXG4gICAgeyBwcm92aWRlOiBVcmxTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFVybFNlcmlhbGl6ZXIgfSxcbiAgICB7IHByb3ZpZGU6IExvY2F0aW9uLCB1c2VDbGFzczogU3B5TG9jYXRpb24gfSxcbiAgICB7IHByb3ZpZGU6IExvY2F0aW9uU3RyYXRlZ3ksIHVzZUNsYXNzOiBNb2NrTG9jYXRpb25TdHJhdGVneSB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJvdXRlcixcbiAgICAgIHVzZUZhY3Rvcnk6IChyZXNvbHZlcjpDb21wb25lbnRSZXNvbHZlciwgdXJsU2VyaWFsaXplcjpVcmxTZXJpYWxpemVyLFxuICAgICAgICAgICAgICAgICAgIG91dGxldE1hcDpSb3V0ZXJPdXRsZXRNYXAsIGxvY2F0aW9uOkxvY2F0aW9uLCBpbmplY3RvcjpJbmplY3RvcikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFJvdXRlcihcbiAgICAgICAgICByb290Q29tcG9uZW50VHlwZSwgcmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIG91dGxldE1hcCwgbG9jYXRpb24sIGluamVjdG9yLCBjb25maWcpO1xuICAgICAgfSxcbiAgICAgIGRlcHM6IFtDb21wb25lbnRSZXNvbHZlciwgVXJsU2VyaWFsaXplciwgUm91dGVyT3V0bGV0TWFwLCBMb2NhdGlvbiwgSW5qZWN0b3JdXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgIHVzZUZhY3Rvcnk6IChyOlJvdXRlcikgPT4gci5yb3V0ZXJTdGF0ZS5yb290LFxuICAgICAgZGVwczogW1JvdXRlcl1cbiAgICB9LFxuICBdO1xufTtcbiJdfQ==
